/*
 * CheggChess.cpp
 *
 *  Created on: Apr 14, 2016
 *      Author: acharys
 *
 *
 *  https://www.chegg.com/tutors/C++-Programming-questions/Need-help-to-change-my-code-from-c-style-to-cpp-transform-and-exchange-the-libraries-and-elements-such-as-File-fprintffscanfd-to-proper-cpp-style--JGTE5/
 *
 *
 *  PLEASE SPEND: 60 minutes
 *  DUE IN: 12 hours from now
 *  ASSIGNED TO: Just you
 *  SUBJECT: C++ Programming
 *
 *  A student asked:
 *
 *  Need help to change my code from c style to cpp
 *  ( transform and exchange the libraries and elements such as : File, fprintf,fscanf,%d,.... to proper cpp style)
 *
 */

#include<iostream>
#include<string>
#include<fstream>

using namespace std;

int** board;
//int x[8] = { -2, -2, -1, 1, 2, 2, 1, -1 };
//int y[8] = { -1, 1, 2, 2, 1, -1, -2, -2 };

bool gotpath(int row, int col, int path, int endnum) {
	if (board[row][col] != 0)
		return false;

	printf("%d\n", path);
	board[row][col] = path;

	if (path == endnum)
		return true;

	if (path > endnum)
		return false;

	int i;
//cout<<row<<" "<<col<<" "<<path<<" "<<endnum<<endl;
	for (i = 0; i < 8; i++) {
		if (gotpath(row + x[i], col + y[i], path + 1, endnum))
			return true;
	}

	board[row][col] = 0;

	return false;

}

void printInFile(int n, FILE *fp1) {
	int i, j;

	for (i = 2; i < n + 2; i++) {
		for (j = 2; j < n + 2; j++)
			fprintf(fp1, "%3d ", board[i][j]);

		fprintf(fp1, "\n");
	}

	fprintf(fp1, "\n");
}
int main(int argc, char*argv[]) {

	//verifying command line arguments
	checkCommandLineArguments(argc);
//	if(argc != 1) {
//		errorCode(1);
//		return 1;
//	}
	int i, n, st_x, st_y, j, k;

	inputFileValidations(argv[1]);
	ifstream fin(argv[1]);
	if (!fin.good()) {
		errorCode(2);
		return 1;
	}

	//To check file is empty http://stackoverflow.com/a/2390938/1903116
	if (fin.peek() == std::ifstream::traits_type::eof()) {
		cout << "file is empty" << endl;
		exit(1);
	}
	FILE *fp = fopen(argv[1], "r");
	string outputFileName;

	for (i = 0; i < strlen(argv[1]); i++) {
		if (argv[1][i] == '.')
			break;
		outputFileName.push_back(argv[1][i]);
	}

	outputFileName = outputFileName + "out.txt";

	FILE *fp1;
	fp1 = fopen(outputFileName.c_str(), "w");

	i = 1;

	while (fscanf(fp, "%d%d%d", &n, &st_x, &st_y) > 0) {

		fprintf(fp1, "Case: %d - %dx%d\n", i, n, n);
		fprintf(fp1, "Start row: %d Start column: %d\n", st_x, st_y);

		board = (int**) malloc(sizeof(int*) * (n + 4));

		for (j = 0; j < n + 4; j++)
			board[j] = (int*) malloc(sizeof(int) * (n + 4));

		for (j = 0; j < n + 4; j++) {
			for (k = 0; k < n + 4; k++) {
				board[j][k] = -1;
			}
		}

		for (j = 2; j < n + 2; j++)
			for (k = 2; k < n + 2; k++)
				board[j][k] = 0;

		if (gotpath(st_x + 2, st_y + 2, 1, n * n))
			printInFile(n, fp1);

		else
			fprintf(fp1, "No Solutions for this case\n\n");

		for (j = 0; j < n + 4; j++)
			free(board[j]);

		free(board);
		i++;

	}
	return 0;
}

void checkCommandLineArguments(int argc) {
	if(argc != 1) {
		errorCode(1);
	}
	return;
}

void inputFileValidations(char* fileName){

}
void errorCode(int errorCode) {

	switch(errorCode){
	case 1:
		cout << "Error : Invalid number of arguments" << endl;
		cout << "Please enter only one argument and that should be input file name";
		break;
	case 2:
		cout << "Error : Invalid input file" << endl;
		cout << "Please enter correct input file";
	case 3:
		cout << "Error : Empty input file" << endl;
		cout << "Please a file having correct input";
	default:
		exit(1);
	}
	exit(1);
}

